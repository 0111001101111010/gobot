---
hero: true
social: true
title: Gobot
author: The Hybrid Group
description: Gobot is a Go framework for robotics and physical computing. It provides a simple, but powerful DSL (domain-specific language) for robots and physical computing.
layout: home
---
%h2 About
%p 
  Gobot is set of libraries in the 
  =link_to "Go programming language", "http://golang.org/", target: "_blank" 
  for robotics and physical computing.

%p It provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the same time.

%p 
  Want to use Ruby on robots? Check out our sister project Artoo 
  =link_to "(http://artoo.io).", "http://artoo.io", target: :blank

%p 
  Want to use Node.js? Check out our sister project Cylon 
  =link_to "(http://cylonjs.com).", "http://cylonjs.com", target: :blank

%h2  Meet The Code

%p Gobot makes commanding robots incredibly simple and fun.

%p All you need to get started is install the library with :  
:markdown
  `go get -u github.com/hybridgroup/gobot`.

%p Then install additional libraries for whatever hardware support you want to use from your robot. For example, `go get -u github.com/hybridgroup/gobot-sphero` to use Gobot with a Sphero.

%h2  Example
:markdown
      :::go
      package main

      import (
        "github.com/hybridgroup/gobot"
        "github.com/hybridgroup/gobot-sphero"
      )

      func main() {

        spheroAdaptor := new(gobotSphero.SpheroAdaptor)
        spheroAdaptor.Name = "Sphero"
        spheroAdaptor.Port = "127.0.0.1:4560"

        sphero := gobotSphero.NewSphero(spheroAdaptor)
        sphero.Name = "Sphero"

        connections := []interface{}{
          spheroAdaptor,
        }
        devices := []interface{}{
          sphero,
        }

        work := func() {
          gobot.Every("2s", func() {
            sphero.Roll(100, uint16(gobot.Random(0, 360)))
          })
        }

        robot := gobot.Robot{
          Connections: connections,
          Devices:     devices,
          Work:        work,
        }

        robot.Start()
      }  



%h2 Getting Started
%p 
  Ready to build Go robots with Gobot? 
  =link_to "Get Started Here!", "", (menu_item("documentation/getting-started"))

%h2 API
%p Gobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.

:markdown
  To activate the API, use the `Api` command like this:

      :::bash
      master := gobot.GobotMaster()
      gobot.Api(master)

  To specify the api port run your Gobot program with the `PORT` environment variable

      :::bash
      $ PORT=8080 go run gobotProgram.go

%h2 Hardware Support
%p
  Gobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported:
  %ul
    %li
      = link_to "Beaglebone Black", "http://beagleboard.org/Products/BeagleBone+Black/", target:"_blank" 
      &lt;==&gt;
      = link_to "Library", "https://github.com/hybridgroup/gobot-beaglebone", target:"_blank" 
    %li
      = link_to "Sphero", "http://www.gosphero.com/", target:"_blank"  
      &lt;==&gt;
      = link_to "Library", "https://github.com/hybridgroup/gobot-sphero", target:"_blank" 
    %li
      = link_to "Digispark", "http://digistump.com/category/1", target:"_blank"  
      &lt;==&gt;
      = link_to "Library", "https://github.com/hybridgroup/gobot-digispark", target:"_blank" 
      
%p More platforms and drivers are coming soon...

:markdown
  ## Be Part Of The Robot Evolution

  - Code on Github:   [https://github.com/hybridgroup/gobot](https://github.com/hybridgroup/gobot)
  - Join us on IRC:   `#gobot @ irc.freenode.net`
  - Join us on our [Trello Board](https://trello.com/b/kQPsldtk/gobot).
