---
title: Gobot API
author: The Hybrid Group
page_title: API
page_subtitle: "The Cylon API provides an interface for retrieving information and communicating with the currently running robots."
layout: documentation
page_title_show: true
---
.api
  %h2  How To Connect
  %p Now you're ready to write code that will let you access your robots on a Cylon.js API server.
  %h3  Running your robot:
  %p The following code example will spin up an API server:

  :markdown
        :::go
        package main

        import (  
          "fmt"
          "github.com/hybridgroup/gobot"
        )

        func Hello(params map[string]interface{}) string {
          name := params["name"].(string)
          return fmt.Sprintf("hi %v", name)
        }

        func main() {
          master := gobot.GobotMaster()
          gobot.Api(master)

          hello := new(gobot.Robot)
          hello.Name = "hello"
          hello.Commands = map[string]interface{}{"Hello": Hello}

          master.Robots = append(master.Robots, *hello)

          master.Start()
        }

    `robot.Start()` automatically starts up the API server.

  -#%h2  How To Configure
  -#%p The Gobot API server allows for port, host, SSL and auth configuration.
  -#%p In your scripts, you can set it up like this:
  -#:markdown
        -#:::go
        -#...

    -#If you run a Gobot script with this code in it, it will start an API server
    -#listening on `https://127.0.0.1:4321`, that will require basic auth for all
    -#routes.

    -#By default, an unconfigured API instance will listen on
    -#`https://127.0.0.1:3000`, using a self-signed cert and with no
    -#authentication.

  %h2 Routes
  %h3 GET /
  %p This route will serve up the Angular app bundled with Gobot, which can be used to view and control your robots and devices.
  -#%a{:href => "/images/screenshots/api-ng-app.png", :target => "_blank"}
    -#%img{:src => "/images/screenshots/api-ng-app.png", :alt => "Angular App Screenshot"}/  
  %h3 GET /robots
  %p Our first route returns all the Robots the master class knows about in JSON format.
  :markdown
        :::bash
        [
          {
            "name": "SpheroBot",
            "connections": [
              {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              }
            ],
            "devices": [
              {
                "name": "sphero",
                "driver": "Sphero",
                "pin": null,
                "connection": {
                  "name": "sphero",
                  "port": "/dev/rfcomm0",
                  "adaptor": "Sphero",
                  "connection_id": 2778
                },
                "commands": [
                  "detectCollisions",
                  "roll",
                  "setColor",
                  "setRGB",
                  "stop"
                ]
              }
            ]
          }
        ]
  %h3 GET /robots/:robotname
  %p Given a robot's name, returns JSON information about the requested Robot:
  :markdown
        :::bash
        {
          "name": "SpheroBot",
          "connections": [
            {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            }
          ],
          "devices": [
            {
              "name": "sphero",
              "driver": "Sphero",
              "pin": null,
              "connection": {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              },
              "commands": [
                "detectCollisions",
                "roll",
                "setColor",
                "setRGB",
                "stop"
              ]
            }
          ]
        }
  %h3 GET /robots/:robotname/commands
  %p Given a robot's name, returns JSON information about the commands belonging to the requested Robot:
  :markdown
        :::bash
        [
          "detectCollisions",
          "roll",
          "setColor",
          "setRGB",
          "stop"
        ]
  %h3 POST /robots/:robotname/commands/:commandrobotname
  %p Given a robot name, commands, and command name, executes a robot's command and returns the result.
  :markdown
        :::bash
        {
          result: "successful"
        }
  %h3 GET /robots/:robotname/devices
  %p Given a robot's name, returns JSON information about the devices belonging to the requested Robot:
  :markdown
        :::bash
        [
          {
            "name": "sphero",
            "driver": "Sphero",
            "pin": null,
            "connection": {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            },
            "commands": [
              "detectCollisions",
              "roll",
              "setColor",
              "setRGB",
              "stop"
            ]
          }
        ]
  %h3 GET /robots/:robotname/devices/:devicename
  %p Given the names of a device and the robot it belongs to, returns data on the specified device.
  :markdown
        :::bash
        {
          "name": "sphero",
          "driver": "Sphero",
          "pin": null,
          "connection": {
            "name": "sphero",
            "port": "/dev/rfcomm0",
            "adaptor": "Sphero",
            "connection_id": 2778
          },
          "commands": [
            "detectCollisions",
            "roll",
            "setColor",
            "setRGB",
            "stop"
          ]
        }
  %h3 GET /robots/:robotname/devices/:devicename/commands
  %p Given the names of a device and the robot it belongs to, returns all commands available for the specified device.
  :markdown
        :::bash
        [
          "detectCollisions",
          "roll",
          "setColor",
          "setRGB",
          "stop"
        ]
  %h3 POST /robots/:robotname/devices/:devicename/commands/:command
  %p Given a robot name, device name, and command name, executes a robot's command and returns the result.
  :markdown
        :::bash
        {
          result: "successful"
        }

    