---
title: Getting Started - Gobot - Golang framework for robotics, physical computing, and the Internet of Things
author: The Hybrid Group
description: Gobot Getting Started
page_title: Getting Started
page_subtitle: A Guide by Humans, for Humans.

page_title_show: true
layout: documentation
---

%section.intro

  = partial "../what_is_gobot"


%section.how-to
  %h2 How to Install Go
  %p 
  Go is an open source programming environment that makes it easy to build simple, reliable, and efficient software.
  = link_to "http://golang.org/doc/install","http://golang.org/doc/install", target:"blank"  
  %h3 OSX
  %p 
  Go to the Go downloads page at 
  = link_to "https://code.google.com/p/go/downloads/list", "https://code.google.com/p/go/downloads/list", target:"blank"  
  download the installer file and run it.
  %h3 Ubuntu
  %p 
  Go to the Go downloads page at 
  = link_to "https://code.google.com/p/go/downloads/list", "https://code.google.com/p/go/downloads/list", target:"blank"  
  download the installer file and run it.
  %h3 Windows
  %p 
  Go to the Go downloads page at 
  = link_to "https://code.google.com/p/go/downloads/list", "https://code.google.com/p/go/downloads/list", target:"blank"  
  download the installer file and run it.

%section
  %h2 How to Install Gobot
  :markdown
    Install the library with: `go get -u github.com/hybridgroup/gobot`

    In order to use Gobot, you must install the libraries needed to control your particular hardware setup. For example, to use Gobot with an Beaglebone, you will need to install the `go get -u github.com/hybridgroup/gobot-beaglebone` library. Check out these examples:

  %h3 OSX
  :markdown
        :::javascript
        go get -u github.com/hybridgroup/gobot
        go get -u github.com/hybridgroup/gobot-beaglebone

  %h3 Ubuntu
  :markdown
        :::javascript
        go get -u github.com/hybridgroup/gobot
        go get -u github.com/hybridgroup/gobot-beaglebone

  %h3 Windows
  %p
    Windows setup for gobot.

  %section
  %h2 Gobot Robots
  %h3 Writing your robot code:

  %p 
  Now you are ready to write your own code. Take a look at the examples below, or go to the 
  = link_to "examples", "https://github.com/hybridgroup/gobot/tree/master/examples", target:"blank"  
  directory for a whole bunch of code you can use to help get started. We recommend using Test-Driven Robotics (TDR) with your preferred test frameworks.


%section
  %h2 Gobot Code Examples

  %h3 Example: Arduino with LED.
  :markdown
    To use this example, you must first run `go get -u github.com/hybridgroup/gobot-firmata`

  :markdown
        :::javascript
        package main

        import (
                "fmt"
                "github.com/hybridgroup/gobot"
                "github.com/hybridgroup/gobot-firmata"
                "github.com/hybridgroup/gobot-gpio"
        )

        func main() {

                firmata := new(gobotFirmata.FirmataAdaptor)
                firmata.Name = "firmata"
                firmata.Port = "/dev/ttyACM0"

                led := gobotGPIO.NewLed(firmata)
                led.Name = "led"
                led.Pin = "13"

                connections := []interface{}{
                        firmata,
                }
                devices := []interface{}{
                        led,
                }

                work := func() {
                        gobot.Every("1s", func() {
                                led.Toggle()
                                if led.IsOn() {
                                        fmt.Println("On")
                                } else {
                                        fmt.Println("Off")
                                }
                        })
                }

                robot := gobot.Robot{
                        Connections: connections,
                        Devices:     devices,
                        Work:        work,
                }

                robot.Start()
        }

  %h3 Sphero 2.0
  :markdown
    To use this example, you must first run `go get -u github.com/hybridgroup/gobot-sphero`
  :markdown
        :::javascript
        package main

        import (
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot-sphero"
        )

        func main() {

          spheroAdaptor := new(gobotSphero.SpheroAdaptor)
          spheroAdaptor.Name = "Sphero"
          spheroAdaptor.Port = "/dev/rfcomm0"

          sphero := gobotSphero.NewSphero(spheroAdaptor)
          sphero.Name = "Sphero"

          work := func() {
            gobot.Every("2s", func() {
              sphero.Roll(100, uint16(gobot.Rand(360)))
            })
          }

          robot := gobot.Robot{
            Connections: []interface{} { spheroAdaptor },
            Devices:     []interface{} { sphero },
            Work:        work,
          }

          robot.Start()
        }

%h2 API
%p Gobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.

:markdown
  To activate the API, use the `Api` command like this:

      :::bash
      master := gobot.GobotMaster()
      gobot.Api(master)

  To specify the api port run your Gobot program with the `PORT` environment variable

      :::bash
      $ PORT=8080 go run gobotProgram.go 

%section.contributing
  %h2 Contributing

  %p 
    You can help gobot grow by contributing your code, new drivers or platforms to the project, check the Github page
    = link_to "gobot on github.","https://github.com/hybridgroup/gobot" 

  %ul
    %li Fork it
    %li Create your feature branch (git checkout -b my-new-feature)
    %li Commit your changes (git commit -am 'Add some feature')
    %li Push to the branch (git push origin my-new-feature)
    %li Create new Pull Request

%section.footer
